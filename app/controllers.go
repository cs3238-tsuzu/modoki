// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Modoki API": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/cs3238-tsuzu/modoki/design
// --out=$(GOPATH)/src/github.com/cs3238-tsuzu/modoki
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// ContainerController is the controller interface for the Container actions.
type ContainerController interface {
	goa.Muxer
	Create(*CreateContainerContext) error
	Download(*DownloadContainerContext) error
	Inspect(*InspectContainerContext) error
	List(*ListContainerContext) error
	Remove(*RemoveContainerContext) error
	Start(*StartContainerContext) error
	Stop(*StopContainerContext) error
	Upload(*UploadContainerContext) error
}

// MountContainerController "mounts" a Container resource controller on the given service.
func MountContainerController(service *goa.Service, ctrl ContainerController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v1/container/create", ctrl.MuxHandler("create", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Create", "route", "GET /api/v1/container/create", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDownloadContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Download(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v1/container/download", ctrl.MuxHandler("download", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Download", "route", "GET /api/v1/container/download", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewInspectContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Inspect(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v1/container/inspect", ctrl.MuxHandler("inspect", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Inspect", "route", "GET /api/v1/container/inspect", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v1/container/list", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "List", "route", "GET /api/v1/container/list", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewRemoveContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Remove(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v1/container/remove", ctrl.MuxHandler("remove", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Remove", "route", "GET /api/v1/container/remove", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewStartContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Start(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v1/container/start", ctrl.MuxHandler("start", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Start", "route", "GET /api/v1/container/start", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewStopContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Stop(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v1/container/stop", ctrl.MuxHandler("stop", h, nil))
	service.LogInfo("mount", "ctrl", "Container", "action", "Stop", "route", "GET /api/v1/container/stop", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUploadContainerContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UploadPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Upload(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("POST", "/api/v1/container/upload", ctrl.MuxHandler("upload", h, unmarshalUploadContainerPayload))
	service.LogInfo("mount", "ctrl", "Container", "action", "Upload", "route", "POST /api/v1/container/upload", "security", "jwt")
}

// unmarshalUploadContainerPayload unmarshals the request body into the context request data Payload field.
func unmarshalUploadContainerPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	var err error
	var payload uploadPayload
	rawAllowOverwrite := req.FormValue("allowOverwrite")
	if allowOverwrite, err2 := strconv.ParseBool(rawAllowOverwrite); err2 == nil {
		tmp3 := &allowOverwrite
		payload.AllowOverwrite = tmp3
	} else {
		err = goa.MergeErrors(err, goa.InvalidParamTypeError("allowOverwrite", rawAllowOverwrite, "boolean"))
	}
	_, rawData, err2 := req.FormFile("data")
	if err2 == nil {
		payload.Data = rawData
	} else {
		err = goa.MergeErrors(err, goa.InvalidParamTypeError("data", "data", "file"))
	}
	rawID := req.FormValue("id")
	payload.ID = &rawID
	rawPath := req.FormValue("path")
	payload.Path = &rawPath
	if err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// VironController is the controller interface for the Viron actions.
type VironController interface {
	goa.Muxer
	Authtype(*AuthtypeVironContext) error
	Get(*GetVironContext) error
	Signin(*SigninVironContext) error
}

// MountVironController "mounts" a Viron resource controller on the given service.
func MountVironController(service *goa.Service, ctrl VironController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAuthtypeVironContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Authtype(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/viron_authtype", ctrl.MuxHandler("authtype", h, nil))
	service.LogInfo("mount", "ctrl", "Viron", "action", "Authtype", "route", "GET /api/v1/viron_authtype")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetVironContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleSecurity("jwt", h)
	service.Mux.Handle("GET", "/api/v1/viron", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Viron", "action", "Get", "route", "GET /api/v1/viron", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSigninVironContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*SigninPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Signin(rctx)
	}
	service.Mux.Handle("POST", "/api/v1/signin", ctrl.MuxHandler("signin", h, unmarshalSigninVironPayload))
	service.LogInfo("mount", "ctrl", "Viron", "action", "Signin", "route", "POST /api/v1/signin")
}

// unmarshalSigninVironPayload unmarshals the request body into the context request data Payload field.
func unmarshalSigninVironPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &signinPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
