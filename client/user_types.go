// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Modoki API": Application User Types
//
// Command:
// $ goagen
// --design=github.com/cs3238-tsuzu/modoki/design
// --out=$(GOPATH)/src/github.com/cs3238-tsuzu/modoki
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
	"time"
	"unicode/utf8"
)

// container user type.
type container struct {
	// The arguments to the command being run
	Args []string `form:"args,omitempty" json:"args,omitempty" xml:"args,omitempty"`
	// The time the container was created
	Created *time.Time `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The name of the image to use when creating the container
	Image *string `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// The container's image ID
	ImageID *string `form:"imageID,omitempty" json:"imageID,omitempty" xml:"imageID,omitempty"`
	// Assign the specified name to the container. Must match /?[a-zA-Z0-9_-]+.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The path to the command being run
	Path  *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
	State *struct {
		Dead       *bool      `form:"dead,omitempty" json:"dead,omitempty" xml:"dead,omitempty"`
		Error      *string    `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
		ExitCode   *int       `form:"exitCode,omitempty" json:"exitCode,omitempty" xml:"exitCode,omitempty"`
		FinishedAt *time.Time `form:"finishedAt,omitempty" json:"finishedAt,omitempty" xml:"finishedAt,omitempty"`
		OomKilled  *bool      `form:"oomKilled,omitempty" json:"oomKilled,omitempty" xml:"oomKilled,omitempty"`
		Paused     *bool      `form:"paused,omitempty" json:"paused,omitempty" xml:"paused,omitempty"`
		Pid        *int       `form:"pid,omitempty" json:"pid,omitempty" xml:"pid,omitempty"`
		Restarting *bool      `form:"restarting,omitempty" json:"restarting,omitempty" xml:"restarting,omitempty"`
		Running    *bool      `form:"running,omitempty" json:"running,omitempty" xml:"running,omitempty"`
		StartedAt  *time.Time `form:"startedAt,omitempty" json:"startedAt,omitempty" xml:"startedAt,omitempty"`
		Status     *string    `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	} `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	Volumes []string `form:"volumes,omitempty" json:"volumes,omitempty" xml:"volumes,omitempty"`
}

// Validate validates the container type instance.
func (ut *container) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.ID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "id"))
	}
	if ut.Image == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "image"))
	}
	if ut.ImageID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "imageID"))
	}
	if ut.Path == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "path"))
	}
	if ut.Args == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "args"))
	}
	if ut.Created == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "created"))
	}
	if ut.State == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "state"))
	}
	if ut.Volumes == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "volumes"))
	}
	if ut.State != nil {
		if ut.State.Error == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`request.state`, "error"))
		}
		if ut.State.ExitCode == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`request.state`, "exitCode"))
		}
		if ut.State.FinishedAt == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`request.state`, "finishedAt"))
		}
		if ut.State.OomKilled == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`request.state`, "oomKilled"))
		}
		if ut.State.Dead == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`request.state`, "dead"))
		}
		if ut.State.Paused == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`request.state`, "paused"))
		}
		if ut.State.Pid == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`request.state`, "pid"))
		}
		if ut.State.Restarting == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`request.state`, "restarting"))
		}
		if ut.State.Running == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`request.state`, "running"))
		}
		if ut.State.StartedAt == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`request.state`, "startedAt"))
		}
		if ut.State.Status == nil {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`request.state`, "status"))
		}
		if ut.State.Status != nil {
			if !(*ut.State.Status == "created" || *ut.State.Status == "running" || *ut.State.Status == "paused" || *ut.State.Status == "restarting" || *ut.State.Status == "removing" || *ut.State.Status == "exited" || *ut.State.Status == "dead") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`request.state.status`, *ut.State.Status, []interface{}{"created", "running", "paused", "restarting", "removing", "exited", "dead"}))
			}
		}
	}
	return
}

// Publicize creates Container from container
func (ut *container) Publicize() *Container {
	var pub Container
	if ut.Args != nil {
		pub.Args = ut.Args
	}
	if ut.Created != nil {
		pub.Created = *ut.Created
	}
	if ut.ID != nil {
		pub.ID = *ut.ID
	}
	if ut.Image != nil {
		pub.Image = *ut.Image
	}
	if ut.ImageID != nil {
		pub.ImageID = *ut.ImageID
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Path != nil {
		pub.Path = *ut.Path
	}
	if ut.State != nil {
		pub.State = &struct {
			Dead       bool      `form:"dead" json:"dead" xml:"dead"`
			Error      string    `form:"error" json:"error" xml:"error"`
			ExitCode   int       `form:"exitCode" json:"exitCode" xml:"exitCode"`
			FinishedAt time.Time `form:"finishedAt" json:"finishedAt" xml:"finishedAt"`
			OomKilled  bool      `form:"oomKilled" json:"oomKilled" xml:"oomKilled"`
			Paused     bool      `form:"paused" json:"paused" xml:"paused"`
			Pid        int       `form:"pid" json:"pid" xml:"pid"`
			Restarting bool      `form:"restarting" json:"restarting" xml:"restarting"`
			Running    bool      `form:"running" json:"running" xml:"running"`
			StartedAt  time.Time `form:"startedAt" json:"startedAt" xml:"startedAt"`
			Status     string    `form:"status" json:"status" xml:"status"`
		}{}
		if ut.State.Dead != nil {
			pub.State.Dead = *ut.State.Dead
		}
		if ut.State.Error != nil {
			pub.State.Error = *ut.State.Error
		}
		if ut.State.ExitCode != nil {
			pub.State.ExitCode = *ut.State.ExitCode
		}
		if ut.State.FinishedAt != nil {
			pub.State.FinishedAt = *ut.State.FinishedAt
		}
		if ut.State.OomKilled != nil {
			pub.State.OomKilled = *ut.State.OomKilled
		}
		if ut.State.Paused != nil {
			pub.State.Paused = *ut.State.Paused
		}
		if ut.State.Pid != nil {
			pub.State.Pid = *ut.State.Pid
		}
		if ut.State.Restarting != nil {
			pub.State.Restarting = *ut.State.Restarting
		}
		if ut.State.Running != nil {
			pub.State.Running = *ut.State.Running
		}
		if ut.State.StartedAt != nil {
			pub.State.StartedAt = *ut.State.StartedAt
		}
		if ut.State.Status != nil {
			pub.State.Status = *ut.State.Status
		}
	}
	if ut.Volumes != nil {
		pub.Volumes = ut.Volumes
	}
	return &pub
}

// Container user type.
type Container struct {
	// The arguments to the command being run
	Args []string `form:"args" json:"args" xml:"args"`
	// The time the container was created
	Created time.Time `form:"created" json:"created" xml:"created"`
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// The name of the image to use when creating the container
	Image string `form:"image" json:"image" xml:"image"`
	// The container's image ID
	ImageID string `form:"imageID" json:"imageID" xml:"imageID"`
	// Assign the specified name to the container. Must match /?[a-zA-Z0-9_-]+.
	Name string `form:"name" json:"name" xml:"name"`
	// The path to the command being run
	Path  string `form:"path" json:"path" xml:"path"`
	State *struct {
		Dead       bool      `form:"dead" json:"dead" xml:"dead"`
		Error      string    `form:"error" json:"error" xml:"error"`
		ExitCode   int       `form:"exitCode" json:"exitCode" xml:"exitCode"`
		FinishedAt time.Time `form:"finishedAt" json:"finishedAt" xml:"finishedAt"`
		OomKilled  bool      `form:"oomKilled" json:"oomKilled" xml:"oomKilled"`
		Paused     bool      `form:"paused" json:"paused" xml:"paused"`
		Pid        int       `form:"pid" json:"pid" xml:"pid"`
		Restarting bool      `form:"restarting" json:"restarting" xml:"restarting"`
		Running    bool      `form:"running" json:"running" xml:"running"`
		StartedAt  time.Time `form:"startedAt" json:"startedAt" xml:"startedAt"`
		Status     string    `form:"status" json:"status" xml:"status"`
	} `form:"state" json:"state" xml:"state"`
	Volumes []string `form:"volumes" json:"volumes" xml:"volumes"`
}

// Validate validates the Container type instance.
func (ut *Container) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	if ut.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "id"))
	}
	if ut.Image == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "image"))
	}
	if ut.ImageID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "imageID"))
	}
	if ut.Path == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "path"))
	}
	if ut.Args == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "args"))
	}

	if ut.State == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "state"))
	}
	if ut.Volumes == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "volumes"))
	}
	if ut.State != nil {
		if ut.State.Error == "" {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`type.state`, "error"))
		}

		if ut.State.Status == "" {
			err = goa.MergeErrors(err, goa.MissingAttributeError(`type.state`, "status"))
		}
		if !(ut.State.Status == "created" || ut.State.Status == "running" || ut.State.Status == "paused" || ut.State.Status == "restarting" || ut.State.Status == "removing" || ut.State.Status == "exited" || ut.State.Status == "dead") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`type.state.status`, ut.State.Status, []interface{}{"created", "running", "paused", "restarting", "removing", "exited", "dead"}))
		}
	}
	return
}

// postPayload user type.
type postPayload struct {
	// contents
	Contents *string `form:"contents,omitempty" json:"contents,omitempty" xml:"contents,omitempty"`
	// published_at
	PublishedAt *time.Time `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
	// status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// url name
	URLName *string `form:"url_name,omitempty" json:"url_name,omitempty" xml:"url_name,omitempty"`
}

// Validate validates the postPayload type instance.
func (ut *postPayload) Validate() (err error) {
	if ut.URLName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "url_name"))
	}
	if ut.Title == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "title"))
	}
	if ut.Contents == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "contents"))
	}
	if ut.Status == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "status"))
	}
	if ut.Contents != nil {
		if utf8.RuneCountInString(*ut.Contents) > 120 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.contents`, *ut.Contents, utf8.RuneCountInString(*ut.Contents), 120, false))
		}
	}
	if ut.Status != nil {
		if !(*ut.Status == "draft" || *ut.Status == "published") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`request.status`, *ut.Status, []interface{}{"draft", "published"}))
		}
	}
	if ut.Title != nil {
		if utf8.RuneCountInString(*ut.Title) > 120 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.title`, *ut.Title, utf8.RuneCountInString(*ut.Title), 120, false))
		}
	}
	return
}

// Publicize creates PostPayload from postPayload
func (ut *postPayload) Publicize() *PostPayload {
	var pub PostPayload
	if ut.Contents != nil {
		pub.Contents = *ut.Contents
	}
	if ut.PublishedAt != nil {
		pub.PublishedAt = ut.PublishedAt
	}
	if ut.Status != nil {
		pub.Status = *ut.Status
	}
	if ut.Title != nil {
		pub.Title = *ut.Title
	}
	if ut.URLName != nil {
		pub.URLName = *ut.URLName
	}
	return &pub
}

// PostPayload user type.
type PostPayload struct {
	// contents
	Contents string `form:"contents" json:"contents" xml:"contents"`
	// published_at
	PublishedAt *time.Time `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
	// status
	Status string `form:"status" json:"status" xml:"status"`
	// title
	Title string `form:"title" json:"title" xml:"title"`
	// url name
	URLName string `form:"url_name" json:"url_name" xml:"url_name"`
}

// Validate validates the PostPayload type instance.
func (ut *PostPayload) Validate() (err error) {
	if ut.URLName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "url_name"))
	}
	if ut.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "title"))
	}
	if ut.Contents == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "contents"))
	}
	if ut.Status == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "status"))
	}
	if utf8.RuneCountInString(ut.Contents) > 120 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.contents`, ut.Contents, utf8.RuneCountInString(ut.Contents), 120, false))
	}
	if !(ut.Status == "draft" || ut.Status == "published") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`type.status`, ut.Status, []interface{}{"draft", "published"}))
	}
	if utf8.RuneCountInString(ut.Title) > 120 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.title`, ut.Title, utf8.RuneCountInString(ut.Title), 120, false))
	}
	return
}

// signinPayload user type.
type signinPayload struct {
	// ID or Email
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the signinPayload type instance.
func (ut *signinPayload) Validate() (err error) {
	if ut.ID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "id"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 256, false))
		}
	}
	return
}

// Publicize creates SigninPayload from signinPayload
func (ut *signinPayload) Publicize() *SigninPayload {
	var pub SigninPayload
	if ut.ID != nil {
		pub.ID = *ut.ID
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// SigninPayload user type.
type SigninPayload struct {
	// ID or Email
	ID string `form:"id" json:"id" xml:"id"`
	// Password
	Password string `form:"password" json:"password" xml:"password"`
}

// Validate validates the SigninPayload type instance.
func (ut *SigninPayload) Validate() (err error) {
	if ut.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "id"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if utf8.RuneCountInString(ut.Password) > 256 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 256, false))
	}
	return
}
